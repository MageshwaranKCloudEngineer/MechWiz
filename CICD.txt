pipeline {
    agent any

    environment {
        GIT_URL                = 'https://github.com/MageshwaranKCloudEngineer/Smart_warranty_project'
        GIT_CREDENTIALS_ID     = 'github-credentials'
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'
        DOCKER_IMAGE           = 'magesh506/smart_warrenty_calculator'
        IMAGE_TAG              = 'latest'
        BRANCH_NAME            = 'master'
        AWS_REGION             = 'us-east-1'
        HOME_DIR               = '/home/ubuntu'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Cloning repository from ${GIT_URL}..."
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${BRANCH_NAME}"]],
                        userRemoteConfigs: [[
                            url: GIT_URL,
                            credentialsId: GIT_CREDENTIALS_ID
                        ]]
                    ])
                    echo "Workspace is located at: ${env.WORKSPACE}"
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "Building and pushing Docker image..."
                    withCredentials([usernamePassword(
                        credentialsId: DOCKER_HUB_CREDENTIALS,
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                        docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} .
                        docker push ${DOCKER_IMAGE}:${IMAGE_TAG}
                        docker logout
                        '''
                    }
                }
            }
        }

        stage('Remove Old Docker Images') {
            steps {
                script {
                    echo "Removing old Docker images and containers..."
                    sh '''
                    if [ $(docker ps -aq -f name=smart-warranty-calculator) ]; then
                        docker stop smart-warranty-calculator
                        docker rm smart-warranty-calculator
                    fi

                    if [ $(docker images -q ${DOCKER_IMAGE}:${IMAGE_TAG}) ]; then
                        docker rmi -f ${DOCKER_IMAGE}:${IMAGE_TAG}
                    fi
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes or Docker') {
            steps {
                script {
                    echo "Installing kubectl (if not present)..."
                    sh '''
                    if ! command -v kubectl &> /dev/null; then
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        sudo mv kubectl /usr/local/bin/
                    fi
                    kubectl version --client
                    '''

                    echo "Deploying Kubernetes manifest from app.yml..."
                    try {
                        sh "kubectl apply -f app.yml"
                    } catch (Exception e) {
                        echo "Kubernetes deployment failed. Triggering Docker deployment as fallback."

                        sh '''
                        if [ $(docker ps -aq -f name=smart-warranty-calculator) ]; then
                            docker stop smart-warranty-calculator
                            docker rm -f smart-warranty-calculator
                        fi

                        echo "Deploying Docker container..."
                        docker run -d --name smart-warranty-calculator -p 5000:5000 \
                            -e AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id) \
                            -e AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key) \
                            -e AWS_SESSION_TOKEN=$(aws configure get aws_session_token) \
                            -e AWS_REGION="${AWS_REGION}" \
                            ${DOCKER_IMAGE}:${IMAGE_TAG}
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}





ubuntu@ip-172-31-16-42:~$ docker run -d --name smart-warranty-calculator -p 5000:5000     -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"     -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"     -e AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN"     -e AWS_REGION="$AWS_REGION"     magesh506/smart_warrenty_calculator:latest
docker: Error response from daemon: Conflict. The container name "/smart-warranty-calculator" is already in use by container "113a48ed8ef656fcde63b279a51e974fd9485630548b853a46998ec3f7374d33". You have to remove (or rename) that container to be able to reuse that name.
See 'docker run --help'.
ubuntu@ip-172-31-16-42:~$ docker rm smart-warranty-calculator
smart-warranty-calculator
ubuntu@ip-172-31-16-42:~$ docker run -d --name smart-warranty-calculator -p 5000:5000     -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"     -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"     -e AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN"     -e AWS_REGION="$AWS_REGION"     magesh506/smart_warrenty_calculator:latest
7802bd16edf554324cf2a18d285506f699587997ec3b90699e0e8bffcd7e5bfd
ubuntu@ip-172-31-16-42:~$
