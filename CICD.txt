pipeline {
    agent any
    environment {
        GIT_URL                = 'https://github.com/MageshwaranKCloudEngineer/Smart_warranty_project'
        GIT_CREDENTIALS_ID     = 'github-credentials'
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'
        DOCKER_IMAGE           = 'magesh506/smart_warrenty_calculator'
        IMAGE_TAG              = 'latest'
        BRANCH_NAME            = 'master'
        AWS_REGION             = 'us-east-1'
        // Specify the absolute path for the home directory
        HOME_DIR               = '/home/ubuntu'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo "Cloning repository from ${GIT_URL}..."
                    checkout([ 
                        $class: 'GitSCM', 
                        branches: [[name: "*/${BRANCH_NAME}"]], 
                        userRemoteConfigs: [[
                            url: GIT_URL, 
                            credentialsId: GIT_CREDENTIALS_ID
                        ]]
                    ])
                    echo "Workspace is located at: ${env.WORKSPACE}"
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo "Building and pushing Docker image..."
                    withCredentials([usernamePassword(
                        credentialsId: DOCKER_HUB_CREDENTIALS,
                        usernameVariable: 'DOCKER_USERNAME',
                        passwordVariable: 'DOCKER_PASSWORD'
                    )]) {
                        sh '''
                          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                          docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} .
                          docker push ${DOCKER_IMAGE}:${IMAGE_TAG}
                          docker logout
                        '''
                    }
                }
            }
        }
        
        stage('Update AWS Credentials') {
            steps {
                script {
                    echo "Making update_aws_creds.sh executable..."
                    sh 'chmod +x update_aws_creds.sh'
                    
                    echo "Running update_aws_creds.sh to refresh AWS credentials..."
                    sh './update_aws_creds.sh'
                    
                    // Optionally, display the updated credentials for verification using the absolute path
                    sh "cat ${HOME_DIR}/.aws/credentials"
                }
            }
        }
        
        stage('Verify Mounted Credentials') {
            steps {
                script {
                    echo "Verifying that the AWS credentials file exists on the host..."
                    sh "cat ${HOME_DIR}/.aws/credentials"

                    echo "Testing mounting of credentials file in a temporary container..."
                    // This runs an alpine container that mounts the credentials file and prints its contents.
                    sh 'docker run --rm -v /home/ubuntu/.aws/credentials:/root/.aws/credentials alpine sh -c "cat /root/.aws/credentials"'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    echo "Installing kubectl (if not present)..."
                    sh '''
                    #!/bin/bash
                    if ! command -v kubectl &> /dev/null; then
                        echo "kubectl not found, installing..."
                        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                        chmod +x kubectl
                        sudo mv kubectl /usr/local/bin/
                    else
                        echo "kubectl is already installed."
                    fi
                    kubectl version --client
                    '''
                    echo "Deploying Kubernetes manifest from app.yml..."
                    try {
                        sh "kubectl apply -f app.yml"
                    } catch (Exception e) {
                        echo "Kubernetes deployment failed. Triggering Docker deployment as fallback."
                        // Fallback: Deploy container with mounted AWS credentials and environment variable
                        sh '''
                        # Remove the existing container if it exists to avoid conflict
                        if [ $(docker ps -aq -f name=smart-warranty-calculator) ]; then
                            echo "Removing existing container..."
                            docker rm -f smart-warranty-calculator
                        fi

                        echo "Deploying Docker container with mounted AWS credentials..."
                        docker run -d --name smart-warranty-calculator -p 5000:5000 \
                          -v /home/ubuntu/.aws/credentials:/root/.aws/credentials \
                          -e AWS_REGION=${AWS_REGION} \
                          -e AWS_SHARED_CREDENTIALS_FILE=/root/.aws/credentials \
                          ${DOCKER_IMAGE}:${IMAGE_TAG}
                        '''
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
